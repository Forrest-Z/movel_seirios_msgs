#!/usr/bin/env python3

import io
import os
import subprocess
import rospy
import rosbag


print_name = "[rosbag_merger.py]"



def merge_bags(bag1, bag2, outbag):
    def run_merge(f_bag1, f_bag2, f_outbag):
        iter1 = f_bag1.read_messages()
        iter2 = f_bag2.read_messages()
        m1 = next(iter1, None)
        m2 = next(iter2, None)
        # m is (topic, msg, t)
        # both iterators not exhausted
        while m1 is not None and m2 is not None:
            if m1[2] <= m2[2]:
                f_outbag.write(*m1)
                m1 = next(iter1, None)    
            else:
                f_outbag.write(*m2)
                m2 = next(iter2, None)    
        # iter1 exhausted, continue iter2
        if m1 is None:
            while m2 is not None:
                f_outbag.write(*m2)
                m2 = next(iter2, None)    
        # iter2 exhausted, continue iter1
        elif m2 is None:
            while m1 is not None:
                f_outbag.write(*m1)
                m1 = next(iter1, None)    
        else:
            return
    # run
    rospy.loginfo(f"{print_name} merging bags: {bag1}, {bag2}, outbag: {outbag}")
    with rosbag.Bag(outbag, 'w', compression="bz2") as f_outbag:
        with rosbag.Bag(bag1) as f_bag1:
            with rosbag.Bag(bag2) as f_bag2:
                run_merge(f_bag1, f_bag2, f_outbag)
    

def reindex_bag(bag, rename_bag_to=None, remove_backup=False):
    bag_folder = os.path.dirname(bag)
    bag_file = os.path.basename(bag)
    # write bash cmd
    output = io.StringIO()
    output.write(f"rosbag reindex {bag}\n")
    # rename
    if rename_bag_to is not None:
        new_name = os.path.join(bag_folder, rename_bag_to)
        output.write(f"mv {bag} {new_name}\n")
    # remove backup
    if remove_backup:
        # backup file is auto-generated by rosbag
        backup_bag_file = bag_file.rsplit(".", 1)
        backup_bag_file = ".".join([backup_bag_file[0], "orig", backup_bag_file[1]])
        backup_bag_file = os.path.join(bag_folder, backup_bag_file)
        output.write(f"rm {backup_bag_file}\n")
    # run bash as subprocess
    cmd = output.getvalue()
    output.close()
    rospy.loginfo(f"{print_name} reindex_bag, running script: \n{cmd}")
    ps = subprocess.Popen(cmd, shell=True, start_new_session=True, stdout=subprocess.DEVNULL)
    ps.wait(timeout=600)   # block until timeout (10mins)
    

def compress_bag(bag, rename_bag_to=None, remove_backup=False):
    bag_folder = os.path.dirname(bag)
    bag_file = os.path.basename(bag)
    # write bash cmd
    output = io.StringIO()
    output.write(f"rosbag compress {bag}\n")
    # rename
    if rename_bag_to is not None:
        new_name = os.path.join(bag_folder, rename_bag_to)
        output.write(f"mv {bag} {new_name}\n")
    # remove backup
    if remove_backup:
        # backup file is auto-generated by rosbag
        backup_bag_file = bag_file.rsplit(".", 1)
        backup_bag_file = ".".join([backup_bag_file[0], "orig", backup_bag_file[1]])
        backup_bag_file = os.path.join(bag_folder, backup_bag_file)
        output.write(f"rm {backup_bag_file}\n")
    # run bash as subprocess
    cmd = output.getvalue()
    output.close()
    rospy.loginfo(f"{print_name} compress_bag, running script: \n{cmd}")
    ps = subprocess.Popen(cmd, shell=True, start_new_session=True, stdout=subprocess.DEVNULL)
    ps.wait(timeout=600)   # block until timeout (10mins)
    