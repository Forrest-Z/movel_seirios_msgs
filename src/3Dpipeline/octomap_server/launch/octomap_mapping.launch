<!-- 
  Example launch file for octomap_server mapping: 
  Listens to incoming PointCloud2 data and incrementally builds an octomap. 
  The data is sent out in different representations. 

  Copy this file into your workspace and adjust as needed, see
  www.ros.org/wiki/octomap_server for details  
-->
<launch>
	<node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
		<param name="resolution" value="0.05" />
		
		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" type="string" value="base_link" />
		
		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="5.0" />
		
		<!-- data source to integrate (PointCloud2) -->
		<param name="points_topic" value="/points_ground" />
	
	</node>
	  <!-- Create "raw" 3D map using first octomap node -->
<!--   <node pkg="octomap_server" type="octomap_server_node" name="octomap_raw" output="screen" >
    <param name="frame_id" type="string" value="map" />
    <param name="occupancy_min_z"  value="0.0" />
    <remap from="octomap_point_cloud_centers" to="raw_point_cloud_centers" />
    <remap from="projected_map" to="raw_map" />
    <remap from="cloud_in" to="/camera/depth/points/filtered" />
  </node> -->
</launch>