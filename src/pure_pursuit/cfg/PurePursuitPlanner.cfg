#!/usr/bin/env python
# FTC Planner configuration

from dynamic_reconfigure.parameter_generator_catkin import ParameterGenerator, double_t, int_t, bool_t

gen = ParameterGenerator()

gen.add("rotation_accuracy", double_t, 0, "Accuracy of the orientation to the goal orientation.", 0.1, 0, 3.14)

gen.add("position_accuracy", double_t, 0, "Maximal distance to the goal position.", 0.1, 0, 0.5)

gen.add("xy_tolerance", double_t, 0, "Linear Tolerance", 0.3, 0, 20.0)

gen.add("th_tolerance", double_t, 0, "Angular Tolerance", 0.5236, 0, 20.0)

gen.add("look_ahead_dist", double_t, 0, "How many poses in front of the robot to be taken as a goal", 10, 0, 100.0)

gen.add("max_linear_vel", double_t, 0, "The maximum x velocity for the robot in m/s.", 0.3, 0, 20.0)

gen.add("max_angular_vel", double_t, 0, "The maximum theta velocity for the robot in rad/s.", 0.785, 0, 20.0)

gen.add("restore_defaults", bool_t, 0, "Restore to the original configuration.", False)

gen.add("regulated_linear_scaling_min_radius", double_t, 0, "The turning radius for which the regulation features are triggered. Remember, sharper turns have smaller radii", 0.9, 0, 20.0)

gen.add("use_regulated_linear_velocity_scaling", bool_t, 0, "Whether to use the regulated features for curvature", True)

gen.add("use_cost_regulated_linear_velocity_scaling", bool_t, 0, "Whether to use the regulated features for proximity to obstacles", False)

gen.add("inflation_cost_scaling_factor", double_t, 0, "The value of cost_scaling_factor set for the inflation layer in the local costmap. The value should be exactly the same for accurately computing distance from obstacles using the inflated cell values", 0.9, 0, 20.0)

gen.add("cost_scaling_dist", double_t, 0, "The minimum distance from an obstacle to trigger the scaling of linear velocity, if use_cost_regulated_linear_velocity_scaling is enabled.", 0.3, 0, 20.0)

gen.add("cost_scaling_gain", double_t, 0, "A multiplier gain, which should be <= 1.0, used to further scale the speed when an obstacle is within cost_scaling_dist. Lower value reduces speed more quickly.", 1.0, 0, 1.0)

gen.add("regulated_linear_scaling_min_speed", double_t, 0, "regulated_linear_scaling_min_speed	The minimum speed for which the regulated features can send, to ensure process is still achievable even in high cost spaces with high curvature.", 0.25, 0, 20.0)

gen.add("min_approach_linear_velocity", double_t, 0, "The minimum velocity threshold to apply when approaching the goal", 0.05, 0, 20.0)


exit(gen.generate("pure_pursuit_local_planner", "pure_pursuit_local_planner", "PurePursuitPlanner"))
