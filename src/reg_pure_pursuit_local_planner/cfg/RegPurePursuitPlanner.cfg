#!/usr/bin/env python
# FTC Planner configuration

from dynamic_reconfigure.parameter_generator_catkin import ParameterGenerator, double_t, int_t, bool_t

gen = ParameterGenerator()

gen.add("rotation_accuracy", double_t, 0, "Accuracy of the orientation to the goal orientation.", 0.1, 0, 3.14)

gen.add("position_accuracy", double_t, 0, "Maximal distance to the goal position.", 0.1, 0, 0.5)

gen.add("xy_tolerance", double_t, 0, "Linear Tolerance", 0.3, 0, 20.0)

gen.add("th_tolerance", double_t, 0, "Angular Tolerance", 0.5236, 0, 20.0)

gen.add("max_vel_x", double_t, 0, "The maximum x velocity for the robot in m/s.", 0.3, 0, 20.0)

gen.add("max_vel_theta", double_t, 0, "The maximum theta velocity for the robot in rad/s.", 0.785, 0, 20.0)

gen.add("look_ahead_dist", double_t, 0, "How many poses in front of the robot to be taken as a goal", 10, 0, 100.0)

gen.add("min_approach_linear_velocity", double_t, 0, "he minimum velocity (m/s) threshold to apply when approaching the goal to ensure progress. Must be > 0.01.", 0.05, 0, 20.0)

gen.add("regulated_linear_scaling_min_radius", double_t, 0, "The turning radius (m) for which the regulation features are triggered when use_regulated_linear_velocity_scaling is tru. Remember, sharper turns have smaller radii.", 0.9, 0, 20.0)

gen.add("regulated_linear_scaling_min_speed", double_t, 0, "The minimum speed (m/s) for which any of the regulated heuristics can send, to ensure process is still achievable even in high cost spaces with high curvature. Must be > 0.1.", 0.25, 0, 20.0)

gen.add("use_regulated_linear_velocity_scaling", bool_t, 0, "Whether to use the regulated features for path curvature (e.g. slow on high curvature paths).", True)

gen.add("use_cost_regulated_linear_velocity_scaling", bool_t, 0, "Whether to use the regulated features for proximity to obstacles (e.g. slow in close proximity to obstacles).", False)

gen.add("inflation_cost_scaling_factor", double_t, 0, "The value of cost_scaling_factor set for the inflation layer in the local costmap. The value should be exactly the same for accurately computing distance from obstacles using the inflated cell values", 0.9, 0, 20.0)

gen.add("cost_scaling_dist", double_t, 0, "The minimum distance from an obstacle to trigger the scaling of linear velocity, if use_cost_regulated_linear_velocity_scaling is enabled.", 0.3, 0, 20.0)

gen.add("cost_scaling_gain", double_t, 0, "A multiplier gain, which should be <= 1.0, used to further scale the speed when an obstacle is within cost_scaling_dist. Lower value reduces speed more quickly.", 1.0, 0, 1.0)

gen.add("use_rotate_to_heading", bool_t, 0, "Whether to enable rotating to rough heading and goal orientation when using holonomic planners. Recommended on for all robot types that can rotate in place.", True)

gen.add("rotate_to_heading_min_angle", double_t, 0, "The difference in the path orientation and the starting robot orientation (radians) to trigger a rotate in place, if use_rotate_to_heading is true.", 0.785, 0, 20.0)

gen.add("rotate_to_heading_angular_vel", double_t, 0, "If use_rotate_to_heading is true, this is the angular velocity to use.", 0.785, 0, 20.0)

gen.add("max_angular_accel", double_t, 0, "Maximum allowable angular acceleration (rad/s/s) while rotating to heading, if use_rotate_to_heading is true.", 3.2, 0, 20.0)

gen.add("max_allowed_time_to_collision_up_to_carrot", double_t, 0, "The time (s) to project a velocity command forward to check for collisions. Pre-Humble, this was max_allowed_time_to_collision.", 1.0, 0, 20.0)


exit(gen.generate("reg_pure_pursuit_local_planner", "reg_pure_pursuit_local_planner", "RegPurePursuitPlanner"))
