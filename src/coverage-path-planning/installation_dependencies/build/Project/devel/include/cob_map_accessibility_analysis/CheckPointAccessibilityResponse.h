// Generated by gencpp from file cob_map_accessibility_analysis/CheckPointAccessibilityResponse.msg
// DO NOT EDIT!


#ifndef COB_MAP_ACCESSIBILITY_ANALYSIS_MESSAGE_CHECKPOINTACCESSIBILITYRESPONSE_H
#define COB_MAP_ACCESSIBILITY_ANALYSIS_MESSAGE_CHECKPOINTACCESSIBILITYRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cob_map_accessibility_analysis
{
template <class ContainerAllocator>
struct CheckPointAccessibilityResponse_
{
  typedef CheckPointAccessibilityResponse_<ContainerAllocator> Type;

  CheckPointAccessibilityResponse_()
    : accessibility_flags()  {
    }
  CheckPointAccessibilityResponse_(const ContainerAllocator& _alloc)
    : accessibility_flags(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _accessibility_flags_type;
  _accessibility_flags_type accessibility_flags;





  typedef boost::shared_ptr< ::cob_map_accessibility_analysis::CheckPointAccessibilityResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_map_accessibility_analysis::CheckPointAccessibilityResponse_<ContainerAllocator> const> ConstPtr;

}; // struct CheckPointAccessibilityResponse_

typedef ::cob_map_accessibility_analysis::CheckPointAccessibilityResponse_<std::allocator<void> > CheckPointAccessibilityResponse;

typedef boost::shared_ptr< ::cob_map_accessibility_analysis::CheckPointAccessibilityResponse > CheckPointAccessibilityResponsePtr;
typedef boost::shared_ptr< ::cob_map_accessibility_analysis::CheckPointAccessibilityResponse const> CheckPointAccessibilityResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cob_map_accessibility_analysis::CheckPointAccessibilityResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cob_map_accessibility_analysis::CheckPointAccessibilityResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cob_map_accessibility_analysis::CheckPointAccessibilityResponse_<ContainerAllocator1> & lhs, const ::cob_map_accessibility_analysis::CheckPointAccessibilityResponse_<ContainerAllocator2> & rhs)
{
  return lhs.accessibility_flags == rhs.accessibility_flags;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cob_map_accessibility_analysis::CheckPointAccessibilityResponse_<ContainerAllocator1> & lhs, const ::cob_map_accessibility_analysis::CheckPointAccessibilityResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cob_map_accessibility_analysis

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cob_map_accessibility_analysis::CheckPointAccessibilityResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cob_map_accessibility_analysis::CheckPointAccessibilityResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_map_accessibility_analysis::CheckPointAccessibilityResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_map_accessibility_analysis::CheckPointAccessibilityResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_map_accessibility_analysis::CheckPointAccessibilityResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_map_accessibility_analysis::CheckPointAccessibilityResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cob_map_accessibility_analysis::CheckPointAccessibilityResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5f3c377d86bd78d373d82f6a042c05ca";
  }

  static const char* value(const ::cob_map_accessibility_analysis::CheckPointAccessibilityResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5f3c377d86bd78d3ULL;
  static const uint64_t static_value2 = 0x73d82f6a042c05caULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_map_accessibility_analysis::CheckPointAccessibilityResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cob_map_accessibility_analysis/CheckPointAccessibilityResponse";
  }

  static const char* value(const ::cob_map_accessibility_analysis::CheckPointAccessibilityResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cob_map_accessibility_analysis::CheckPointAccessibilityResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool[] accessibility_flags    			  # array of booleans which correspond to the points and define accessibility (true=free, false=obstacle)\n"
;
  }

  static const char* value(const ::cob_map_accessibility_analysis::CheckPointAccessibilityResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cob_map_accessibility_analysis::CheckPointAccessibilityResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.accessibility_flags);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CheckPointAccessibilityResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cob_map_accessibility_analysis::CheckPointAccessibilityResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cob_map_accessibility_analysis::CheckPointAccessibilityResponse_<ContainerAllocator>& v)
  {
    s << indent << "accessibility_flags[]" << std::endl;
    for (size_t i = 0; i < v.accessibility_flags.size(); ++i)
    {
      s << indent << "  accessibility_flags[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.accessibility_flags[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // COB_MAP_ACCESSIBILITY_ANALYSIS_MESSAGE_CHECKPOINTACCESSIBILITYRESPONSE_H
