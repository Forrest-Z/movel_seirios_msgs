#!/usr/bin/env python
PACKAGE = "dafan_docking"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#Goal Offset
gen.add("goal_offset_x", double_t, 0, "x offset for goal", 0.0,  -1.0, 1.0)
gen.add("goal_offset_y", double_t, 0, "y offset for goal", 0.0,  -1.0, 1.0)
#0: Passthrough filter
gen.add("min_z", double_t, 0, "Passthrough: Min z (height)", -0.5,  -10.0, 10.0)
gen.add("max_z", double_t, 0, "Passthrough: Max z (height)", 1.0,  -10.0,  10.0)
gen.add("min_x", double_t, 0, "Passthrough: Min x (depth)", 0.0,  0.0, 20.0)
gen.add("max_x", double_t, 0, "Passthrough: Max x (depth)", 10.0,  0.0,  20.0)
#1: Voxel Filter
gen.add("leaf_size", double_t,    0, "Voxel: leaf size", 0.1,  0.0, 100.0)
gen.add("min_points_voxel", int_t,    0, "Voxel: minimum points to form a voxel", 10,  0, 250)
#2: Statistical Outlier Removal
gen.add("sor_knn", int_t, 0, "Statistical Outlier Removal: K nearest Neighbors", 5,  0, 250)
gen.add("sor_stddev", double_t, 0, "Statistical Outlier Removal: standard deviation", 1.0,  0.0, 100.0)
#3: Radius Outlier Removal
gen.add("outrem_rad_search", double_t, 0, "Radius Outlier Removal: radius to search for neighbors", 0.8,  0.0, 10.0)
gen.add("outrem_min_neigh", int_t,  0, "Radius Outlier Removal: minimum neighbors", 2,  0, 100)
#4: Planar segmentation
gen.add("seg_max_itr", int_t, 0, "Segmentation: Maximum number of iterations", 25,  0, 1000)
gen.add("seg_dist_thresh", double_t, 0, "Segmentation: distance threshold", 0.01,  0.0, 10.0)
#5: Euclidean clustering
gen.add("ec_tol", double_t, 0, "Euclidean Clustering: Tolerance", 0.02,  0.0, 100.0)
gen.add("ec_min_size", int_t, 0, "Euclidean Clustering: Minimum cluster size", 100,  0, 100000)
gen.add("ec_max_size", int_t, 0, "Euclidean Clustering: Maximum cluster size", 25000,  0, 100000)

exit(gen.generate(PACKAGE, "dafan_docking", "orientateplane"))