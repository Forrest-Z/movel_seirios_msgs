# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Macros
default-context: &default-context
  context:
    - movelai-global
    - movelai-ros

feature-branches: &feature-branches
  filters:
    branches:
      only: /^(feat|fix|refactor|ci|housekeeping|housekeep)\/.*/

release-branches: &release-branches
  filters:
    branches:
      only: /^release\/.*/

master-branch: &master-branch
  filters:
    branches:
      only: master

# Executors
executors:
  docker-dev-plus-x86:
    docker:
      - image: $DOCKERHUB_NAMESPACE/rns-ros-dev-plus-x86:latest
        auth:
          username: $DOCKERHUB_NAMESPACE
          password: $DOCKERHUB_TOKEN
    working_directory: /home/movel/seirios_ws
  docker-alpine:
    docker:
      - image: alpine:3.18.0
    working_directory: /tmp/build
  docker-dind:
    docker:
      - image: docker:stable-dind
    working_directory: /tmp/build
  vm-linux:
    machine:
      image: ubuntu-2004:2023.04.2

# Commands
commands:
  build_deb_pkgs:
    description: Build debian packages
    parameters:
      target:
        type: enum
        default: "master"
        enum: ["feature", "staging", "master"]
      arch:
        type: enum
        default: "x86"
        enum: ["x86", "arm64"]
    steps:
      - run:
          name: Pull docker image
          command: |
            docker login --username $DOCKERHUB_NAMESPACE --password $DOCKERHUB_TOKEN
            docker pull $DOCKERHUB_NAMESPACE/rns-ros-dev-plus-<< parameters.arch >>:latest
      - run:
          name: Prepare repo for build
          command: |
            docker kill df-docker || true
            docker container prune -f
            docker run --rm --privileged -i --name df-docker -d $DOCKERHUB_NAMESPACE/rns-ros-dev-plus-<< parameters.arch >>:latest
            docker cp ../project/ df-docker:/home/movel/
            docker exec df-docker bash -c "pwd && ls -la"
            docker exec df-docker bash -c "mv project seirios_ros && cd seirios_ros && mkdir debs/"
            docker exec df-docker bash -c "cd seirios_ros && mkdir -p /tmp/movel/debs/"
      - run:
          name: Update dependencies
          command: |
            docker exec df-docker bash -c "rosdep update"
            docker exec df-docker bash -c "apt-get -y update"
            docker exec df-docker bash -c 'cd seirios_ros && export CUSTOM_ROS_DEP_INSTALL=$(rosdep install --reinstall --simulate --from-path src --ignore-src | awk "{print \$3 }" | grep "ros-\|python") && export size=${#CUSTOM_ROS_DEP_INSTALL} && if [[ $size<10 ]]; then exit 1; else echo $CUSTOM_ROS_DEP_INSTALL > ros_dep_install.txt; fi'
            docker exec df-docker bash -c "cd seirios_ros && rosdep install --from-paths src --ignore-src -r -y"
      - when:
          condition:
            equal: [ "master", << parameters.target >> ]
          steps:
            - run:
                name: Build deb packages
                command: |
                  docker exec df-docker bash -c "source /opt/ros/noetic/setup.bash && source /usr/share/colcon_cd/function/colcon_cd.sh && export MOVEL_LICENSE=RWBBX && cd seirios_ros && robot package generate -r . -m colcon"
                  docker exec df-docker bash -c "cd seirios_ros && cp -r /tmp/movel/debs/* debs/"
      - when:
          condition:
            not:
              equal: [ "master", << parameters.target >> ]
          steps:
            - run:
                name: Build deb packages
                command: |
                  docker exec df-docker bash -c "source /opt/ros/noetic/setup.bash && source /usr/share/colcon_cd/function/colcon_cd.sh && cd seirios_ros && robot package generate -r . -m colcon"
                  docker exec df-docker bash -c "cd seirios_ros && cp -r /tmp/movel/debs/* debs/"
      - run:
          name: Generate Dockerfile
          command: docker exec df-docker bash -c "cd seirios_ros && robot docker generate -r . -s debs/ --target << parameters.target >>_<< parameters.arch >>"
      - run:
          name: Push deb packages to package registry #TODO: find another repository for deb packages
          command: docker exec df-docker bash -c "cd seirios_ros && robot package upload -s debs/ -r . --target << parameters.target >>_<< parameters.arch >> -p $GITLAB_PERSONAL_ACCESS_TOKEN || true"
      - run:
          name: Copy build artifacts
          command: |
            docker cp df-docker:/home/movel/seirios_ros/debs . 
            docker cp df-docker:/home/movel/seirios_ros/<< parameters.target >>_<< parameters.arch >>_Dockerfile ./Dockerfile
            docker cp df-docker:/home/movel/seirios_ros/ros_dep_install.txt .

  build_docker:
    description: 'Build docker image'
    parameters:
      target:
        type: enum
        default: "master"
        enum: ["feature", "staging", "master"]
      arch:
        type: enum
        default: "x86"
        enum: ["x86", "arm64"]
    steps:
      - when:
          condition:
            equal: [ "feature", << parameters.target >> ]
          steps:
            - run:
                name: Export variables
                command: |
                  echo 'export OUT_IMAGE=${DOCKERHUB_NAMESPACE}/rns-ros-<< parameters.target >>-<< parameters.arch >>' >> $BASH_ENV
                  echo 'export IMAGE_TAG=$(echo $CIRCLE_BRANCH | sed 's/[^a-zA-Z0-9]/-/g')' >> $BASH_ENV
                  echo 'export CUSTOM_ROS_DEP_INSTALL=$(cat ros_dep_install.txt)' >> $BASH_ENV
                  source $BASH_ENV
      - when:
          condition:
            not:
              equal: [ "feature", << parameters.target >> ]
          steps:
            - run:
                name: Export variables
                command: |
                  echo 'export OUT_IMAGE=${DOCKERHUB_NAMESPACE}/rns-ros-<< parameters.target >>-<< parameters.arch >>' >> $BASH_ENV
                  echo 'export IMAGE_TAG=$(cat seirios_release.yml | grep -oh "[0-9.]*$")' >> $BASH_ENV
                  echo 'export CUSTOM_ROS_DEP_INSTALL=$(cat ros_dep_install.txt)' >> $BASH_ENV
                  source $BASH_ENV
      - when:
          condition:
            not:
              equal: [ "master", << parameters.target >> ]
          steps:
            - run:
                name: Build docker image
                command: |
                  docker login --username $DOCKERHUB_NAMESPACE --password $DOCKERHUB_TOKEN
                  docker rmi ${OUT_IMAGE}:${IMAGE_TAG} || true
                  docker pull ${DOCKERHUB_NAMESPACE}/rns-ros-dev-plus-<< parameters.arch >>:latest
                  docker build --tag ${OUT_IMAGE}:${IMAGE_TAG} --build-arg CUSTOM_ROS_DEP_INSTALL="${CUSTOM_ROS_DEP_INSTALL}" -f Dockerfile .
            - run:
                name: Push image to private registry
                command: docker push ${OUT_IMAGE}:${IMAGE_TAG}
            - run:
                name: Clean up images
                command: docker rmi ${OUT_IMAGE}:${IMAGE_TAG}
            - send-message:
                when: "success"
                message: "Successfully deployed docker image: ${OUT_IMAGE}:${IMAGE_TAG}"
                webhook: ${GOOGLE_CHAT_MSG_WEBHOOK}
      - when:
          condition:
            equal: [ "master", << parameters.target >> ]
          steps:
            - run:
                name: Build docker image
                command: |
                  docker login --username $DOCKERHUB_NAMESPACE --password $DOCKERHUB_TOKEN
                  docker rmi ${OUT_IMAGE}:${IMAGE_TAG} || true
                  docker pull ${DOCKERHUB_NAMESPACE}/rns-ros-release-plus-<< parameters.arch >>:latest
                  docker build --tag ${OUT_IMAGE}:${IMAGE_TAG} --build-arg CUSTOM_ROS_DEP_INSTALL="${CUSTOM_ROS_DEP_INSTALL}" -f Dockerfile .
            - run:
                name: Push image to private registry
                command: docker push ${OUT_IMAGE}:${IMAGE_TAG}
            - run:
                name: Push latest tag
                command: |
                  docker image tag ${OUT_IMAGE}:${IMAGE_TAG} ${OUT_IMAGE}:latest
                  docker push ${OUT_IMAGE}:latest
                  docker rmi ${OUT_IMAGE}:latest
            - run:
                name: Clean up images
                command: docker rmi ${OUT_IMAGE}:${IMAGE_TAG}
            - send-message:
                when: "success"
                message: "Successfully deployed docker image: ${OUT_IMAGE}:${IMAGE_TAG}"
                webhook: ${GOOGLE_CHAT_MSG_WEBHOOK}
            - send-message:
                when: "success"
                message: "Successfully deployed docker image: ${OUT_IMAGE}:latest"
                webhook: ${GOOGLE_CHAT_MSG_WEBHOOK}

  tagging:
    description: 'Automate git tagging from the triggered branch'
    parameters:
      rc:
        type: boolean
        default: false
    steps:
      - run:
          name: Install git and ssh
          command: apk add --no-cache git openssh
      - checkout
      - run:
          name: Configure git
          command: |
            git config --global user.email << pipeline.trigger_parameters.github_app.commit_author_email >>
            git config --global user.name "<< pipeline.trigger_parameters.github_app.commit_author_name >>"
      - when:
          condition: << parameters.rc >>
          steps:
            - run:
                name: Tag corresponding commit
                command: |
                  export IMAGE_TAG=$(cat seirios_release.yml | grep -oh "[0-9.]*$").rc
                  echo ${IMAGE_TAG}
                  git tag -f ${IMAGE_TAG}
                  git push origin ${IMAGE_TAG} --force
                  echo 'export TAG_MSG=${IMAGE_TAG}' >> $BASH_ENV
                  source $BASH_ENV
      - when:
          condition:
            not: << parameters.rc >>
          steps:
            - run:
                name: Tag corresponding commit
                command: |
                  export IMAGE_TAG=$(cat seirios_release.yml | grep -oh "[0-9.]*$")
                  echo ${IMAGE_TAG}
                  git tag -f ${IMAGE_TAG}
                  git push origin ${IMAGE_TAG} --force
                  echo 'export TAG_MSG=${IMAGE_TAG}' >> $BASH_ENV
                  source $BASH_ENV
      - run:
          name: Cleanup
          command: git remote remove origin
      - send-message:
          when: "success"
          message: "Added tag: ${TAG_MSG}"
          webhook: ${GOOGLE_CHAT_MSG_WEBHOOK}

  # TODO: fix invalid token from curl. Calling curl locally (from outside the pipeline) with the very same token works.
  notify:
    description: 'Send notification to google chat'
    parameters:
      when:
        type: enum
        default: "success"
        enum: ["failure", "success", "running"]
      webhook:
        type: string
    steps:
      - when:
          condition:
            equal: [ "failure", << parameters.when >> ]
          steps:
            - run:
                name: Sending notification
                when: on_fail
                command: |
                  export CARD_IMG_URL="https://static-00.iconduck.com/assets.00/error-o-icon-512x512-aq7fhgxm.png"
                  export CARD_TITLE="Pipeline Failed"
                  export COMMIT_SHA="<< pipeline.trigger_parameters.github_app.commit_sha >>"
                  export SHORT_COMMIT_SHA=${COMMIT_SHA:0:8}
                  export SHORT_WORKFLOW_ID=${CIRCLE_WORKFLOW_ID:0:8}
                  export API_RESPONSE=$( curl --request GET --url https://circleci.com/api/v2/workflow/${CIRCLE_WORKFLOW_ID} --header 'Circle-Token: ${CIRCLE_TOKEN}' )
                  export PIPELINE_NUM=$( echo ${API_RESPONSE} | jq -r '.pipeline_number' )
                  export WORKFLOW_NAME=$( echo ${API_RESPONSE} | jq -r '.name' )
                  export WORKFLOW_URL="https://app.circleci.com/pipelines/workflows/${CIRCLE_WORKFLOW_ID}"
                  curl --header "Content-Type: application/json" \
                    --request POST \
                    --data "{\"cardsV2\":[{\"cardId\":\"pipeline_card\",\"card\":{\"header\":{\"title\":\"${CARD_TITLE}\",\"subtitle\":\"Workflow ${SHORT_WORKFLOW_ID} at << pipeline.trigger_parameters.github_app.repo_name >>\",\"imageUrl\":\"${CARD_IMG_URL}\",\"imageType\":\"CIRCLE\",\"imageAltText\":\"status image\"},\"sections\":[{\"header\":\"Pipeline Details\",\"collapsible\":false,\"widgets\":[{\"decoratedText\":{\"startIcon\":{\"iconUrl\":\"https://static-00.iconduck.com/assets.00/git-branch-icon-506x512-cvb8ut16.png\"},\"text\":\"${CIRCLE_BRANCH}\",\"onClick\":{\"openLink\":{\"url\":\"<< pipeline.trigger_parameters.github_app.web_url >>/tree/${CIRCLE_BRANCH}\"}}}},{\"decoratedText\":{\"startIcon\":{\"iconUrl\":\"https://static.thenounproject.com/png/2537955-200.png\", \"imageType\": \"CIRCLE\"},\"onClick\":{\"openLink\":{\"url\":\"<< pipeline.trigger_parameters.github_app.web_url >>/commit/${COMMIT_SHA}\"}},\"text\":\"<b>(${SHORT_COMMIT_SHA})</b> << pipeline.trigger_parameters.github_app.commit_title >>\"}},{\"decoratedText\":{\"startIcon\":{\"iconUrl\":\"https://static.thenounproject.com/png/3499262-200.png\"},\"text\":\"${CIRCLE_WORKFLOW_ID}\",\"onClick\":{\"openLink\":{\"url\":\"${WORKFLOW_URL}\"}}}},{\"decoratedText\":{\"startIcon\":{\"iconUrl\":\"https://static-00.iconduck.com/assets.00/user-icon-512x512-u0spsrd0.png\"},\"text\":\"<< pipeline.trigger_parameters.github_app.user_name >>\"}},{\"buttonList\":{\"buttons\":[{\"text\":\"View Pipeline\",\"onClick\":{\"openLink\":{\"url\":\"${WORKFLOW_URL}\"}}}]}}]}]}}]}" \
                    "<< parameters.webhook >>"
      - when:
          condition:
            equal: [ "success", << parameters.when >> ]
          steps:
            - run:
                name: Sending notification
                when: on_success
                command: |
                  export CARD_IMG_URL="https://static-00.iconduck.com/assets.00/right-o-icon-512x512-60i1xoud.png"
                  export CARD_TITLE="Pipeline Succeeded"
                  export COMMIT_SHA="<< pipeline.trigger_parameters.github_app.commit_sha >>"
                  export SHORT_COMMIT_SHA=${COMMIT_SHA:0:8}
                  export SHORT_WORKFLOW_ID=${CIRCLE_WORKFLOW_ID:0:8}
                  export API_RESPONSE=$( curl --request GET --url https://circleci.com/api/v2/workflow/${CIRCLE_WORKFLOW_ID} --header 'Circle-Token: ${CIRCLE_TOKEN}' )
                  export PIPELINE_NUM=$( echo ${API_RESPONSE} | jq -r '.pipeline_number' )
                  export WORKFLOW_NAME=$( echo ${API_RESPONSE} | jq -r '.name' )
                  export WORKFLOW_URL="https://app.circleci.com/pipelines/workflows/${CIRCLE_WORKFLOW_ID}"
                  curl --header "Content-Type: application/json" \
                    --request POST \
                    --data "{\"cardsV2\":[{\"cardId\":\"pipeline_card\",\"card\":{\"header\":{\"title\":\"${CARD_TITLE}\",\"subtitle\":\"Workflow ${SHORT_WORKFLOW_ID} at << pipeline.trigger_parameters.github_app.repo_name >>\",\"imageUrl\":\"${CARD_IMG_URL}\",\"imageType\":\"CIRCLE\",\"imageAltText\":\"status image\"},\"sections\":[{\"header\":\"Pipeline Details\",\"collapsible\":false,\"widgets\":[{\"decoratedText\":{\"startIcon\":{\"iconUrl\":\"https://static-00.iconduck.com/assets.00/git-branch-icon-506x512-cvb8ut16.png\"},\"text\":\"${CIRCLE_BRANCH}\",\"onClick\":{\"openLink\":{\"url\":\"<< pipeline.trigger_parameters.github_app.web_url >>/tree/${CIRCLE_BRANCH}\"}}}},{\"decoratedText\":{\"startIcon\":{\"iconUrl\":\"https://static.thenounproject.com/png/2537955-200.png\", \"imageType\": \"CIRCLE\"},\"onClick\":{\"openLink\":{\"url\":\"<< pipeline.trigger_parameters.github_app.web_url >>/commit/${COMMIT_SHA}\"}},\"text\":\"<b>(${SHORT_COMMIT_SHA})</b> << pipeline.trigger_parameters.github_app.commit_title >>\"}},{\"decoratedText\":{\"startIcon\":{\"iconUrl\":\"https://static.thenounproject.com/png/3499262-200.png\"},\"text\":\"${CIRCLE_WORKFLOW_ID}\",\"onClick\":{\"openLink\":{\"url\":\"${WORKFLOW_URL}\"}}}},{\"decoratedText\":{\"startIcon\":{\"iconUrl\":\"https://static-00.iconduck.com/assets.00/user-icon-512x512-u0spsrd0.png\"},\"text\":\"<< pipeline.trigger_parameters.github_app.user_name >>\"}},{\"buttonList\":{\"buttons\":[{\"text\":\"View Pipeline\",\"onClick\":{\"openLink\":{\"url\":\"${WORKFLOW_URL}\"}}}]}}]}]}}]}" \
                    "<< parameters.webhook >>"
      - when:
          condition:
            equal: [ "running", << parameters.when >> ]
          steps:
            - run:
                name: Sending notification
                command: |
                  export CARD_IMG_URL="https://static-00.iconduck.com/assets.00/running-o-icon-512x512-ch5zuanx.png"
                  export CARD_TITLE="Pipeline Running"
                  export COMMIT_SHA="<< pipeline.trigger_parameters.github_app.commit_sha >>"
                  export SHORT_COMMIT_SHA=${COMMIT_SHA:0:8}
                  export API_RESPONSE=$( curl --request GET --url https://circleci.com/api/v2/workflow/${CIRCLE_WORKFLOW_ID} --header 'Circle-Token: ${CIRCLE_TOKEN}' )
                  export SHORT_WORKFLOW_ID=${CIRCLE_WORKFLOW_ID:0:8}
                  export PIPELINE_NUM=$( echo ${API_RESPONSE} | jq -r '.pipeline_number' )
                  export WORKFLOW_NAME=$( echo ${API_RESPONSE} | jq -r '.name' )
                  export WORKFLOW_URL="https://app.circleci.com/pipelines/workflows/${CIRCLE_WORKFLOW_ID}"
                  curl --header "Content-Type: application/json" \
                    --request POST \
                    --data "{\"cardsV2\":[{\"cardId\":\"pipeline_card\",\"card\":{\"header\":{\"title\":\"${CARD_TITLE}\",\"subtitle\":\"Workflow ${SHORT_WORKFLOW_ID} at << pipeline.trigger_parameters.github_app.repo_name >>\",\"imageUrl\":\"${CARD_IMG_URL}\",\"imageType\":\"CIRCLE\",\"imageAltText\":\"status image\"},\"sections\":[{\"header\":\"Pipeline Details\",\"collapsible\":false,\"widgets\":[{\"decoratedText\":{\"startIcon\":{\"iconUrl\":\"https://static-00.iconduck.com/assets.00/git-branch-icon-506x512-cvb8ut16.png\"},\"text\":\"${CIRCLE_BRANCH}\",\"onClick\":{\"openLink\":{\"url\":\"<< pipeline.trigger_parameters.github_app.web_url >>/tree/${CIRCLE_BRANCH}\"}}}},{\"decoratedText\":{\"startIcon\":{\"iconUrl\":\"https://static.thenounproject.com/png/2537955-200.png\", \"imageType\": \"CIRCLE\"},\"onClick\":{\"openLink\":{\"url\":\"<< pipeline.trigger_parameters.github_app.web_url >>/commit/${COMMIT_SHA}\"}},\"text\":\"<b>(${SHORT_COMMIT_SHA})</b> << pipeline.trigger_parameters.github_app.commit_title >>\"}},{\"decoratedText\":{\"startIcon\":{\"iconUrl\":\"https://static.thenounproject.com/png/3499262-200.png\"},\"text\":\"${CIRCLE_WORKFLOW_ID}\",\"onClick\":{\"openLink\":{\"url\":\"${WORKFLOW_URL}\"}}}},{\"decoratedText\":{\"startIcon\":{\"iconUrl\":\"https://static-00.iconduck.com/assets.00/user-icon-512x512-u0spsrd0.png\"},\"text\":\"<< pipeline.trigger_parameters.github_app.user_name >>\"}},{\"buttonList\":{\"buttons\":[{\"text\":\"View Pipeline\",\"onClick\":{\"openLink\":{\"url\":\"${WORKFLOW_URL}\"}}}]}}]}]}}]}" \
                    "<< parameters.webhook >>"

  send-message:
    description: 'Send non-pipeline-status message to google chat'
    parameters:
      when:
        type: enum
        default: "running"
        enum: ["failure", "success", "running"]
      message:
        type: string
      webhook:
        type: string
    steps:
      - when:
          condition:
            equal: [ "failure", << parameters.when >> ]
          steps:
            - run:
                name: Sending message
                when: on_fail
                command: |
                  export SHORT_WORKFLOW_ID=${CIRCLE_WORKFLOW_ID:0:8}
                  export WORKFLOW_URL="https://app.circleci.com/pipelines/workflows/${CIRCLE_WORKFLOW_ID}"
                  curl --header "Content-Type: application/json" \
                    --request POST \
                    --data "{\"text\": \"*Message from job ${CIRCLE_JOB} of workflow <${WORKFLOW_URL}|${SHORT_WORKFLOW_ID}>*\\n<< parameters.message >>\"}" \
                    "<< parameters.webhook >>"
      - when:
          condition:
            equal: [ "success", << parameters.when >> ]
          steps:
            - run:
                name: Sending message
                when: on_success
                command: |
                  export SHORT_WORKFLOW_ID=${CIRCLE_WORKFLOW_ID:0:8}
                  export WORKFLOW_URL="https://app.circleci.com/pipelines/workflows/${CIRCLE_WORKFLOW_ID}"
                  curl --header "Content-Type: application/json" \
                    --request POST \
                    --data "{\"text\": \"*Message from job ${CIRCLE_JOB} of workflow <${WORKFLOW_URL}|${SHORT_WORKFLOW_ID}>*\\n<< parameters.message >>\"}" \
                    "<< parameters.webhook >>"
      - when:
          condition:
            equal: [ "running", << parameters.when >> ]
          steps:
            - run:
                name: Sending message
                command: |
                  export SHORT_WORKFLOW_ID=${CIRCLE_WORKFLOW_ID:0:8}
                  export WORKFLOW_URL="https://app.circleci.com/pipelines/workflows/${CIRCLE_WORKFLOW_ID}"
                  curl --header "Content-Type: application/json" \
                    --request POST \
                    --data "{\"text\": \"*Message from job ${CIRCLE_JOB} of workflow <${WORKFLOW_URL}|${SHORT_WORKFLOW_ID}>*\\n<< parameters.message >>\"}" \
                    "<< parameters.webhook >>"

# Jobs
jobs:
  # pre-merge-build-check:
  #   resource_class: medium
  #   executor: docker-dev-plus-x86
  #   steps:
  #     - run:
  #         name: Check directory
  #         command: |
  #           echo << pipeline.trigger_parameters.gitlab.type >>
  #           mkdir -p src/seirios_ros && cd src/seirios_ros
  #           pwd
  #           ls -la
  #     - checkout:
  #         path: src/seirios_ros
  #     - run:
  #         name: Prepare build check
  #         command: |
  #           cd /home/movel/seirios_ws
  #           source /opt/ros/noetic/setup.bash && apt update && rosdep update && rosdep install --from-paths src --ignore-src -r -y
  #     - run:
  #         name: Build check
  #         command: |
  #           source /opt/ros/noetic/setup.bash
  #           catkin_make --only-pkg-with-deps movel_seirios_msgs
  #           catkin_make -DCATKIN_WHITELIST_PACKAGES=""

  start-pipeline-notify-feature:
    resource_class: small
    executor: docker-alpine
    steps:
      - run:
          name: Install curl and jq
          command: apk add --no-cache curl jq
      - notify:
          when: "running"
          webhook: ${GOOGLE_CHAT_WEBHOOK}
      - send-message:
          when: "success"
          message: "Workflow needs approval to continue."
          webhook: ${GOOGLE_CHAT_MSG_WEBHOOK}

  build-feature-x86:
    resource_class: large
    executor: vm-linux
    steps:
      - checkout
      - build_deb_pkgs:
          target: "feature"
          arch: "x86"
      - persist_to_workspace:
          root: /home/circleci/project
          paths:
            - Dockerfile
            - debs
            - ros_dep_install.txt
            - seirios_release.yml
      - notify:
          when: "failure"
          webhook: ${GOOGLE_CHAT_WEBHOOK}

  deploy-feature-x86:
    resource_class: medium
    executor: vm-linux
    steps:
      - attach_workspace:
          at: /home/circleci/project
      - build_docker:
          target: "feature"
          arch: "x86"
      - notify:
          when: "failure"
          webhook: ${GOOGLE_CHAT_WEBHOOK}
      # - notify:
      #     when: "success"
      #     webhook: ${GOOGLE_CHAT_WEBHOOK}

  build-feature-arm64:
    resource_class: arm.large
    executor: vm-linux
    steps:
      - checkout
      - build_deb_pkgs:
          target: "feature"
          arch: "arm64"
      - persist_to_workspace:
          root: /home/circleci/project
          paths:
            - Dockerfile
            - debs
            - ros_dep_install.txt
            - seirios_release.yml
      - notify:
          when: "failure"
          webhook: ${GOOGLE_CHAT_WEBHOOK}

  deploy-feature-arm64:
    resource_class: arm.medium
    executor: vm-linux
    steps:
      - attach_workspace:
          at: /home/circleci/project
      - build_docker:
          target: "feature"
          arch: "arm64"
      - notify:
          when: "failure"
          webhook: ${GOOGLE_CHAT_WEBHOOK}
      # - notify:
      #     when: "success"
      #     webhook: ${GOOGLE_CHAT_WEBHOOK}

  start-pipeline-notify-staging:
    resource_class: small
    executor: docker-alpine
    steps:
      - run:
          name: Install curl and jq
          command: apk add --no-cache curl jq
      - notify:
          when: "running"
          webhook: ${GOOGLE_CHAT_WEBHOOK}
      - send-message:
          when: "success"
          message: "Workflow needs approval to continue."
          webhook: ${GOOGLE_CHAT_MSG_WEBHOOK}

  build-staging-x86:
    resource_class: large
    executor: vm-linux
    steps:
      - checkout
      - build_deb_pkgs:
          target: "staging"
          arch: "x86"
      - persist_to_workspace:
          root: /home/circleci/project
          paths:
            - Dockerfile
            - debs
            - ros_dep_install.txt
            - seirios_release.yml
      - notify:
          when: "failure"
          webhook: ${GOOGLE_CHAT_WEBHOOK}

  deploy-staging-x86:
    resource_class: medium
    executor: vm-linux
    steps:
      - attach_workspace:
          at: /home/circleci/project
      - build_docker:
          target: "staging"
          arch: "x86"
      - notify:
          when: "failure"
          webhook: ${GOOGLE_CHAT_WEBHOOK}

  build-staging-arm64:
    resource_class: arm.large
    executor: vm-linux
    steps:
      - checkout
      - build_deb_pkgs:
          target: "staging"
          arch: "arm64"
      - persist_to_workspace:
          root: /home/circleci/project
          paths:
            - Dockerfile
            - debs
            - ros_dep_install.txt
            - seirios_release.yml
      - notify:
          when: "failure"
          webhook: ${GOOGLE_CHAT_WEBHOOK}

  deploy-staging-arm64:
    resource_class: arm.medium
    executor: vm-linux
    steps:
      - attach_workspace:
          at: /home/circleci/project
      - build_docker:
          target: "staging"
          arch: "arm64"
      - notify:
          when: "failure"
          webhook: ${GOOGLE_CHAT_WEBHOOK}

  tagging-staging:
    resource_class: small
    executor: docker-alpine
    steps:
      - run:
          name: Install curl
          command: apk add --no-cache curl jq
      - tagging:
          rc: true
      - notify:
          when: "failure"
          webhook: ${GOOGLE_CHAT_WEBHOOK}
      # - notify:
      #     when: "success"
      #     webhook: ${GOOGLE_CHAT_WEBHOOK}

  start-pipeline-notify-master:
    resource_class: small
    executor: docker-alpine
    steps:
      - run:
          name: Install curl and jq
          command: apk add --no-cache curl jq
      - notify:
          when: "running"
          webhook: ${GOOGLE_CHAT_WEBHOOK}

  build-master-x86:
    resource_class: large
    executor: vm-linux
    steps:
      - checkout
      - build_deb_pkgs:
          target: "master"
          arch: "x86"
      - persist_to_workspace:
          root: /home/circleci/project
          paths:
            - Dockerfile
            - debs
            - ros_dep_install.txt
            - seirios_release.yml
      - notify:
          when: "failure"
          webhook: ${GOOGLE_CHAT_WEBHOOK}

  deploy-master-x86:
    resource_class: medium
    executor: vm-linux
    steps:
      - attach_workspace:
          at: /home/circleci/project
      - build_docker:
          target: "master"
          arch: "x86"
      - notify:
          when: "failure"
          webhook: ${GOOGLE_CHAT_WEBHOOK}

  build-master-arm64:
    resource_class: arm.large
    executor: vm-linux
    steps:
      - checkout
      - build_deb_pkgs:
          target: "master"
          arch: "arm64"
      - persist_to_workspace:
          root: /home/circleci/project
          paths:
            - Dockerfile
            - debs
            - ros_dep_install.txt
            - seirios_release.yml
      - notify:
          when: "failure"
          webhook: ${GOOGLE_CHAT_WEBHOOK}

  deploy-master-arm64:
    resource_class: arm.medium
    executor: vm-linux
    steps:
      - attach_workspace:
          at: /home/circleci/project
      - build_docker:
          target: "master"
          arch: "arm64"
      - notify:
          when: "failure"
          webhook: ${GOOGLE_CHAT_WEBHOOK}

  push-public-rns-ros-registry:
    resource_class: small
    executor: docker-dind
    steps:
      - run:
          name: Install git and ssh
          command: apk add --no-cache git openssh
      - checkout
      - run:
          name: Get tag
          command: |
            echo 'export IMAGE_TAG=$(cat seirios_release.yml | grep -oh "[0-9.]*$")' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Create manifest
          command: |
            source $BASH_ENV
            echo ${IMAGE_TAG}

  tagging-master:
    resource_class: small
    executor: docker-alpine
    steps:
      - run:
          name: Install curl
          command: apk add --no-cache curl jq
      - tagging:
          rc: false
      - notify:
          when: "failure"
          webhook: ${GOOGLE_CHAT_WEBHOOK}

  push-public-movel-seirios-msgs-repo:
    resource_class: small
    executor: docker-alpine
    steps:
      - run:
          name: Install tools
          command: apk add --no-cache git openssh curl jq
      - checkout
      - run:
          name: Export variables
          command: |
            echo 'export VERSION=$(cat seirios_release.yml | grep -oh "[0-9.]*$").rc' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Clone public movel_seirios_msgs repo
          command: |
            cd .. && mkdir movel_msgs && cd movel_msgs
            git clone https://github.com/movelrobotics/movel_seirios_msgs.git
      - run:
          name: Copy changes to public movel_seirios_msgs repo
          command: cd .. && cp -r build/src/movel_seirios_msgs/. movel_msgs/movel_seirios_msgs/. && cd movel_msgs/movel_seirios_msgs/
      - run:
          name: Configure git
          command: |
            git config --global user.email << pipeline.trigger_parameters.github_app.commit_author_email >>
            git config --global user.name "<< pipeline.trigger_parameters.github_app.commit_author_name >>"
            git remote set-url origin https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/movelrobotics/movel_seirios_msgs.git
      - run:
          name: Commit changes and push
          command: |
            git add .
            git commit -m "Commit from seirios-ros-version -- ${VERSION}" || true
            git push --force origin master
      - run:
          name: Cleanup
          command: git remote remove origin
      - notify:
          when: "failure"
          webhook: ${GOOGLE_CHAT_WEBHOOK}
      # - notify:
      #     when: "success"
      #     webhook: ${GOOGLE_CHAT_WEBHOOK}

  notify-pipeline-success:
    resource_class: small
    executor: docker-alpine
    steps:
      - notify:
          when: "success"
          webhook: ${GOOGLE_CHAT_WEBHOOK}

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  ci-test:
    when:
      equal: [ << pipeline.trigger_parameters.github_app.branch >>, "feat/ci-push-docker-public" ]
    
    jobs:
      - push-public-rns-ros-registry

  deployment:
    jobs:
      # feature branches
      - start-pipeline-notify-feature:
          <<: *default-context
          <<: *feature-branches

      - start-feature-pipeline:
          type: approval
          <<: *feature-branches
          requires:
            - start-pipeline-notify-feature

      # feature x86
      - build-feature-x86:
          <<: *default-context
          <<: *feature-branches
          requires:
            - start-feature-pipeline
      - deploy-feature-x86:
          <<: *default-context
          <<: *feature-branches
          requires:
            - build-feature-x86

      # feature arm64
      - build-feature-arm64:
          <<: *default-context
          <<: *feature-branches
          requires:
            - start-feature-pipeline
      - deploy-feature-arm64:
          <<: *default-context
          <<: *feature-branches
          requires:
            - build-feature-arm64

      # staging/release branches
      - start-pipeline-notify-staging:
          <<: *default-context
          <<: *release-branches

      - start-staging-pipeline:
          type: approval
          <<: *release-branches
          requires:
            - start-pipeline-notify-staging

      # staging x86
      - build-staging-x86:
          <<: *default-context
          <<: *release-branches
          requires:
            - start-staging-pipeline
      - deploy-staging-x86:
          <<: *default-context
          <<: *release-branches
          requires:
            - build-staging-x86

      # staging arm64
      - build-staging-arm64:
          <<: *default-context
          <<: *release-branches
          requires:
            - start-staging-pipeline
      - deploy-staging-arm64:
          <<: *default-context
          <<: *release-branches
          requires:
            - build-staging-arm64
      
      # staging tag
      - tagging-staging:
          <<: *default-context
          <<: *release-branches
          requires:
            - deploy-staging-x86
            - deploy-staging-arm64

      # master branches
      - start-pipeline-notify-master:
          <<: *default-context
          <<: *master-branch

      # master x86
      - build-master-x86:
          <<: *default-context
          <<: *master-branch
          requires:
            - start-pipeline-notify-master
      - deploy-master-x86:
          <<: *default-context
          <<: *master-branch
          requires:
            - build-master-x86

      # master arm64
      - build-master-arm64:
          <<: *default-context
          <<: *master-branch
          requires:
            - start-pipeline-notify-master
      - deploy-master-arm64:
          <<: *default-context
          <<: *master-branch
          requires:
            - build-master-arm64
      
      # master tag
      - tagging-master:
          <<: *default-context
          <<: *master-branch
          requires:
            - deploy-master-x86
            - deploy-master-arm64

      # push public config repo
      - push-public-movel-seirios-msgs-repo:
          <<: *default-context
          <<: *master-branch
          requires:
            - tagging-master
      
      - notify-pipeline-success:
          <<: *default-context
          requires:
            # final job(s) of feature pipeline
            - deploy-feature-x86
            - deploy-feature-arm64
            # final job(s) of staging
            - tagging-staging
            # final job(s) of master
            - push-public-movel-seirios-msgs-repo